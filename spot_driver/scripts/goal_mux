#!/usr/bin/env python3

import rospy
from std_msgs.msg import Bool
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Odometry

class GoalMux:
    def __init__(self):
        # Parameters
        self.deadman_topic = rospy.get_param('~deadman_topic', '/deadman_stop')
        self.input_topic = rospy.get_param('~input_topic', '/spot/carrot_goal')
        self.output_topic = rospy.get_param('~output_topic', '/muxed_output')

        # State
        self.deadman_active = True
        self.published_stop = True

        # Subscribers
        rospy.Subscriber(self.deadman_topic, Bool, self.deadman_callback)
        rospy.Subscriber(self.input_topic, PoseStamped, self.input_callback)

        # Publisher
        self.publisher = rospy.Publisher(self.output_topic, PoseStamped, queue_size=10)

    def deadman_callback(self, msg):
        self.deadman_active = msg.data

    def input_callback(self, msg):
        if not self.deadman_active:
            self.publisher.publish(msg)
            self.published_stop = False
        elif not self.published_stop:
            pose_msg = PoseStamped()
            pose_msg.header.stamp = rospy.Time.now()
            pose_msg.header.frame_id = "body"
            pose_msg.pose.position.x = 0
            pose_msg.pose.position.y = 0
            pose_msg.pose.position.z = 0
            self.publisher.publish(pose_msg)
            self.published_stop = True


if __name__ == "__main__":
    rospy.init_node('goal_mux_node')
    GoalMux()
    rospy.spin()

