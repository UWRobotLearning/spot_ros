#!/usr/bin/env python

import rospy
from std_msgs.msg import Bool
from sensor_msgs.msg import Joy

class JoystickMonitor:
    def __init__(self):
        # Retrieve parameters with default values if they are not provided
        self.joystick_timeout = rospy.Duration(rospy.get_param("~joystick_timeout", 1.0))
        self.deadman_button = rospy.get_param("~deadman_button", 4)
        self.joystick_topic = rospy.get_param("~joystick_topic", "/joy")
        self.emergency_stop_topic = rospy.get_param("~emergency_stop_topic", "/deadman_stop")

        self.last_joy_msg_time = rospy.Time.now()
        self.deadman_pressed = False

        # Publisher for emergency stop
        self.emergency_stop_pub = rospy.Publisher(self.emergency_stop_topic, Bool, queue_size=1)

        # Subscriber for joystick messages
        rospy.Subscriber(self.joystick_topic, Joy, self.joy_callback)

        # Timer to check for joystick timeout
        rospy.Timer(rospy.Duration(0.1), self.check_timeout)

    def joy_callback(self, msg):
        # Update the last received joystick message time
        self.last_joy_msg_time = rospy.Time.now()

        # Check if the specified deadman button is pressed
        if 0 <= self.deadman_button < len(msg.buttons):
            self.deadman_pressed = msg.buttons[self.deadman_button] == 1
        else:
            rospy.logwarn("Invalid deadman button index specified. Check your parameter settings.")
            self.deadman_pressed = False

    def check_timeout(self, event):
        # Check if the time since the last joystick message exceeds the timeout or if deadman is not pressed
        if rospy.Time.now() - self.last_joy_msg_time > self.joystick_timeout or not self.deadman_pressed:
            # Publish True to the emergency stop topic if no joystick input or deadman not pressed
            self.emergency_stop_pub.publish(True)
        else:
            # Publish False if joystick messages are being received and deadman is pressed
            self.emergency_stop_pub.publish(False)

if __name__ == '__main__':
    rospy.init_node('joystick_monitor')
    monitor = JoystickMonitor()
    rospy.spin()

